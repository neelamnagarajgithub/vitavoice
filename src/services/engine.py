import os
from dotenv import load_dotenv
from pymongo import MongoClient
from passlib.hash import bcrypt
import requests
import json
from fpdf import FPDF
import json
from datetime import datetime

load_dotenv()  # Load variables from .env

MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)



db = client["vitavoice"]
quiries_col = db["quiries"]
users_col = db["users"]

def queries(username,  query):
    if users_col.find_one({"username": username}):
        output=nlp_processor(query);
        quiries_col.insert_one({"username": username, "query": query,"output":output})
        return output
    else :
        return False, "Username already exists"



def nlp_processor(query):
    prompt = (
    "You are an AI health assistant. Respond to the following patient query in a clear, concise, and professional manner, just like a doctor would.\n"
    f"Patient: {query}\n"
    "AI Doctor:"
    )
    
    api_url = "https://openrouter.ai/api/v1/chat/completions"
    api_key = os.getenv("OPEN_ROUTER_KEY")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "openai/gpt-3.5-turbo",  
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 300
    }

    response = requests.post(api_url, headers=headers, data=json.dumps(data))
    result = response.json()
    doctor_reply = result["choices"][0]["message"]["content"] if "choices" in result else str(result)

    return doctor_reply


def generate_ehr(username, chat_history):
    """
    Generate a structured EHR summary from chat history using the LLM.
    chat_history: list of dicts with 'role' and 'text'
    """
    # Format chat history for the prompt
    chat_lines = []
    for entry in chat_history:
        if entry["role"] == "user":
            chat_lines.append(f"Patient: {entry['text']}")
        else:
            chat_lines.append(f"AI Doctor: {entry['text']}")
    chat_text = "\n".join(chat_lines)

    prompt = (
        "You are a medical records assistant. Given the following conversation between a patient and an AI doctor, "
        "generate a structured EHR (Electronic Health Record) summary in JSON format. "
        "Include fields: patient_name, chief_complaint, history_of_present_illness, assessment, plan, and any medications or advice given.\n\n"
        f"Patient Name: {username}\n"
        f"Conversation:\n{chat_text}\n\n"
        "EHR Summary (JSON):"
    )

    api_url = "https://openrouter.ai/api/v1/chat/completions"
    api_key = os.getenv("OPEN_ROUTER_KEY")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 500
    }

    response = requests.post(api_url, headers=headers, data=json.dumps(data))
    result = response.json()
    ehr_json = result["choices"][0]["message"]["content"] if "choices" in result else str(result)
    return ehr_json

def create_ehr_pdf(ehr_data, username):
    pdf = FPDF()
    pdf.add_page()
    
    # --- Header ---
    logo_path = os.path.join("assets", "logo.png")
    if os.path.exists(logo_path):
        pdf.image(logo_path, x=80, y=10, w=50)
        pdf.ln(35)
    
    pdf.set_font("Arial", "B", 20)
    pdf.set_text_color(34, 139, 34)  # Dark green
    pdf.cell(0, 10, "Electronic Health Record (EHR)", ln=True, align="C")
    pdf.ln(5)
    
    pdf.set_font("Arial", "", 12)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 8, f"Patient: {username}", ln=True)
    pdf.cell(0, 8, f"Date: {datetime.now().strftime('%Y-%m-%d')}", ln=True)
    pdf.ln(5)
    
    # Horizontal line
    pdf.set_draw_color(34, 139, 34)
    pdf.set_line_width(0.5)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())
    pdf.ln(5)
    
    # --- EHR Content ---
    for key, value in ehr_data.items():
        pdf.set_font("Arial", "B", 12)
        pdf.set_text_color(34, 139, 34)
        pdf.cell(0, 8, f"{key.replace('_', ' ').title()}:", ln=True)
        
        pdf.set_font("Arial", "", 12)
        pdf.set_text_color(0, 0, 0)
        
        # Format lists or dicts as a table-like string
        if isinstance(value, list):
            for i, item in enumerate(value, 1):
                pdf.multi_cell(0, 7, f"  {i}. {item}")
        elif isinstance(value, dict):
            for sub_key, sub_val in value.items():
                pdf.multi_cell(0, 7, f"  - {sub_key.replace('_', ' ').title()}: {sub_val}")
        else:
            pdf.multi_cell(0, 8, str(value))
        pdf.ln(2)
    
    # --- Footer line ---
    pdf.set_y(-15)
    pdf.set_draw_color(34, 139, 34)
    pdf.set_line_width(0.5)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())
    pdf.set_font("Arial", "I", 8)
    pdf.set_text_color(100, 100, 100)
    pdf.cell(0, 5, "Generated by Vitavoice AI", align="C")
    
    pdf_output = pdf.output(dest="S").encode("latin1")
    return pdf_output